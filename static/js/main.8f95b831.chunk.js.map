{"version":3,"sources":["serviceWorker.js","components/Navbar/Navbar.js","components/Main/Main.js","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","useEffect","document","title","className","Main","API_KEY","useState","maxTemp","setMaxTemp","minTemp","setMinTemp","temp","setTemp","type","setType","city","setCity","feels","setFeels","humid","setHumid","symbol","setSymbol","axios","get","then","res","data","main","temp_max","temp_min","weather","feels_like","humidity","id","onChange","e","console","log","newCity","target","value","t","toFixed","getTemp","f","getFeelsTemp","max","getMaxTemp","min","getMinTemp","onClick","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f95b831.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect } from \"react\";\nimport \"./Navbar.css\";\n\nexport default function Navbar() {\n  useEffect(() => {\n    document.title = \"Weather App\";\n  });\n  return <div className=\"navbar\">My Weather Application</div>;\n}\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./Main.css\";\r\n\r\nexport default function Main() {\r\n  const API_KEY = \"52fc60ce71a5b4b724a42352692d2d24\";\r\n  const [maxTemp, setMaxTemp] = useState(\"\");\r\n  const [minTemp, setMinTemp] = useState(\"\");\r\n  const [temp, setTemp] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n  const [city, setCity] = useState(\"Kolkata\");\r\n  const [feels, setFeels] = useState(\"\");\r\n  const [humid, setHumid] = useState(\"\");\r\n  const [symbol, setSymbol] = useState(\"°C\");\r\n\r\n  const getTemp = (symbol) => {\r\n    var t = 0;\r\n    switch (symbol) {\r\n      case \"°C\":\r\n        t = (temp - 273).toFixed(0);\r\n        break;\r\n      case \"K\":\r\n        t = temp;\r\n        break;\r\n      case \"°F\":\r\n        t = ((temp - 273) * (9 / 5) + 32).toFixed(0);\r\n        break;\r\n      default:\r\n    }\r\n    return t;\r\n  };\r\n  const getMinTemp = (symbol) => {\r\n    var min = 0;\r\n    switch (symbol) {\r\n      case \"°C\":\r\n        min = (minTemp - 273).toFixed(0);\r\n        break;\r\n      case \"K\":\r\n        min = minTemp;\r\n        break;\r\n      case \"°F\":\r\n        min = ((minTemp - 273) * (9 / 5) + 32).toFixed(0);\r\n        break;\r\n      default:\r\n    }\r\n    return min;\r\n  };\r\n  const getMaxTemp = (symbol) => {\r\n    var max;\r\n    switch (symbol) {\r\n      case \"°C\":\r\n        max = (maxTemp - 273).toFixed(0);\r\n        break;\r\n      case \"K\":\r\n        max = maxTemp;\r\n        break;\r\n      case \"°F\":\r\n        max = ((maxTemp - 273) * (9 / 5) + 32).toFixed(0);\r\n        break;\r\n      default:\r\n    }\r\n    return max;\r\n  };\r\n  const getFeelsTemp = (symbol) => {\r\n    var f;\r\n    switch (symbol) {\r\n      case \"°C\":\r\n        f = (feels - 273).toFixed(0);\r\n        break;\r\n      case \"K\":\r\n        f = feels;\r\n        break;\r\n      case \"°F\":\r\n        f = ((feels - 273) * (9 / 5) + 32).toFixed(0);\r\n        break;\r\n      default:\r\n    }\r\n    return f;\r\n  };\r\n\r\n  function newCity(city) {\r\n    setCity(city);\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}`\r\n      )\r\n      .then((res) => {\r\n        setTemp(res.data.main.temp);\r\n        setMaxTemp(res.data.main.temp_max);\r\n        setMinTemp(res.data.main.temp_min);\r\n        setType(res.data.weather[0].main);\r\n        setFeels(res.data.main.feels_like);\r\n        setHumid(res.data.main.humidity);\r\n        console.log(res.data);\r\n      });\r\n  }\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=kolkata&appid=${API_KEY}`\r\n      )\r\n      .then((res) => {\r\n        setTemp(res.data.main.temp);\r\n        setMaxTemp(res.data.main.temp_max);\r\n        setMinTemp(res.data.main.temp_min);\r\n        setType(res.data.weather[0].main);\r\n        setFeels(res.data.main.feels_like);\r\n        setHumid(res.data.main.humidity);\r\n      });\r\n  }, []);\r\n\r\n  // function handleSubmit(e) {\r\n  //   var city = e.target.textContent.split(\" \")[1];\r\n  //   axios\r\n  //     .post(`https://weather-app-64739.firebaseio.com/.json`, {\r\n  //       city: city,\r\n  //       temp: temp,\r\n  //     })\r\n  //     .then(alert(`${city} has been added successfully!`));\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <form>\r\n        <label>Select a city : </label>\r\n        <select id=\"choose\" onChange={(e) => newCity(e.target.value)}>\r\n          <option value=\"Kolkata\">Kolkata</option>\r\n          <option value=\"Mumbai\">Mumbai</option>\r\n          <option value=\"Bangalore\">Bangalore</option>\r\n          <option value=\"Chennai\">Chennai</option>\r\n          <option value=\"Ahmedabad\">Ahmedabad</option>\r\n          <option value=\"Hyderabad\">Hyderabad</option>\r\n          <option value=\"Pune\">Pune</option>\r\n        </select>\r\n      </form>\r\n      <div className=\"container\">\r\n        <div className=\"card\">\r\n          <h3 id=\"city\">{city}</h3>\r\n          <h1 id=\"temp\">\r\n            {getTemp(symbol)}\r\n            {symbol}\r\n          </h1>\r\n          <h5>\r\n            <i>\r\n              Feels like : {getFeelsTemp(symbol)}\r\n              {symbol}\r\n            </i>\r\n          </h5>\r\n          <span id=\"type\">{type}</span>\r\n          <span>\r\n            {getMaxTemp(symbol)}\r\n            {symbol} / {getMinTemp(symbol)}\r\n            {symbol}\r\n          </span>\r\n          <p>Humidity : {humid} &#37;</p>\r\n          <div className=\"temptype\">\r\n            <span>Temperature Type :</span>\r\n            <button id=\"c\" className=\"tempbtn\" onClick={() => setSymbol(\"°C\")}>\r\n              &#8451;\r\n            </button>\r\n            <button id=\"k\" className=\"tempbtn\" onClick={() => setSymbol(\"K\")}>\r\n              K\r\n            </button>\r\n            <button id=\"f\" className=\"tempbtn\" onClick={() => setSymbol(\"°F\")}>\r\n              &#8457;\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"addCity\">\r\n        <button className=\"addbtn\" onClick={(e) => handleSubmit(e)}>\r\n          Add {city} to My Cities\r\n        </button>\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Main from \"./components/Main/Main\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Navbar />\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}